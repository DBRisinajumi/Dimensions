<?php
namespace DBRisinajumi\Dimensions;

/**
 * Test class for Report.
 * Generated by PHPUnit on 2013-01-18 at 15:56:32.
 */
class ReportTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Report
     */
    protected $object;
    
    private $nLevelId;
    
    private $level;
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $Database = new \mysqli(TEST_DB_HOST, TEST_DB_USER, TEST_DB_PASSWORD, TEST_DB);
        $this->object = new Report($Database);
        $this->object->setPeriodType('monthly');
        $this->level = new Level($Database);
        $sSql = "DELETE FROM `dim_data`";
        $this->object->getDbConnection()->query($sSql);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        if ($this->nLevelId) {
            $this->level->deleteLevelItem(1, $this->nLevelId);
        }
    }

    public function testGetGridDataLevels() {
        
        //$this->object->setRootId();
        $this->assertFalse($this->object->getGridDataLevels());
    }
    
    public function testGetGridDataLevels2() {
        
        $this->object->setYear(2013);
        $this->nLevelId = $this->level->addLevel(null, 1, 'test_code', 'test_label', Level::VISIBLE, null);
        $aAssummed = array(
            0 => array(
                'id' => $this->nLevelId,
                'parent_level_id' => (string)Report::LEVEL_1,
                'code' => 'test_code',
                'label' => 'test_label',
                'link_exists' => true,
                'level' => 2, //level+1
                'level_id' => $this->nLevelId,
                'nYear' => 2013,
                'total_amt' => 0
            )
        );
        $aActual = $this->object->getGridDataLevels();
        $this->assertEquals($aAssummed, $aActual);
    }
    
    public function testGetGridDataLevels3() {
        $this->nParentLevelId = $this->level->addLevel(null, Report::LEVEL_1, 'test_code', 'test_label', Level::VISIBLE, null);
        $this->object->setYear(2013);
        
        $this->nLevelId = $this->level->addLevel($this->nParentLevelId, Report::LEVEL_2, 'test_code2', 'test_label2', Level::VISIBLE, null);
        $aAssummed = array(
            0 => array(
                'id' => $this->nParentLevelId,
                'parent_level_id' => 1,
                'code' => 'test_code',
                'label' => 'test_label',
                'link_exists' => true,
                'level' => 2,
                'level_id' => $this->nParentLevelId,
                'nYear' => 2013,
                'total_amt' => 0
            )
        );
        
        $aActual = $this->object->getGridDataLevels();
        $this->assertEquals($aAssummed, $aActual);
    }

    public function testGetGridDataPeriods() {
        //$this->object->setRootId();
        $aActual = $this->object->getGridDataPeriods();
        var_dump($aActual);
        $this->assertFalse($aActual);
    }

    /**
     * @todo Implement testGetAllGridDataPeriodLevels().
     */
    public function testGetAllGridDataPeriodLevels() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }
    
    /**
     * Generated from @assert (0) == '0.00'.
     */
    public function testGetFormattedAmt() {
        $this->assertEquals(
                '0.00', $this->object->getFormattedAmt(0)
        );
    }

    public function testGetYears() {
        $this->assertSame(
                false, $this->object->getYears()
        );
    }
    
    public function testGetYears2() {
        $sSql = "INSERT INTO `dim_data` (`date_from`, `date_to`) VALUES ('2013-01-19', '2013-01-19');";
        //print_r($this->object);
        $this->object->getDbConnection()->query($sSql);
        $this->assertEquals(
                array(0 => array('year' => 2013)), $this->object->getYears()
        );
    }

    public function testSetPeriodType() {
        // Remove the following lines when you implement this test.
        $this->setExpectedException('InvalidArgumentException');
        $this->object->setPeriodType('quarterly');
    }
    
    public function testSetPeriodType2() {
        $this->assertSame(
            null, $this->object->setPeriodType('monthly')
        );
    }
    
    public function testSetPeriodType3() {
        $this->assertSame(
            null, $this->object->setPeriodType('weekly')
        );
    }

    /**
     * @todo Implement testSetYear().
     */
    public function testSetYear() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    public function testGetYear() {
        
        $year = 2012;
        $this->object->setYear($year);
        $this->assertSame($year, $this->object->getYear());
    }
    
    public function testGetYear2() {
        
        $year = 2010;
        $this->object->setYear($year);
        $this->assertNotEquals($year, $this->object->getYear());
    }

    public function testGetPrevYear() {
        $this->object->setYear(2012);
        $sSql = "INSERT INTO `dim_data` (`date_from`, `date_to`) VALUES ('2013-01-19', '2013-01-19');";
        $this->object->getDbConnection()->query($sSql);
        $this->assertFalse($this->object->getPrevYear());
    }
    
    public function testGetPrevYear2() {
        $this->object->setYear(2012);
        $sSql = "INSERT INTO `dim_data` (`date_from`, `date_to`) VALUES ('2011-01-19', '2011-01-19');";
        $this->object->getDbConnection()->query($sSql);
        $this->assertEquals(2011, $this->object->getPrevYear());
    }

    public function testGetNextYear() {
        $this->object->setYear(2012);
        $sSql = "INSERT INTO `dim_data` (`date_from`, `date_to`) VALUES ('2011-01-19', '2011-01-19');";
        $this->object->getDbConnection()->query($sSql);
        $this->assertFalse($this->object->getNextYear());
    }
    
    public function testGetNextYear2() {
        $this->object->setYear(2012);
        $sSql = "INSERT INTO `dim_data` (`date_from`, `date_to`) VALUES ('2016-01-19', '2016-01-19');";
        $this->object->getDbConnection()->query($sSql);
        $this->assertEquals(2016, $this->object->getNextYear());
    }

    /**
     * @todo Implement testCreateGridData().
     */
    public function testCreateGridData() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testCreateGridDataHorizontalDates().
     */
    public function testCreateGridDataHorizontalDates() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testCreateListData().
     */
    public function testCreateListData() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}

?>
